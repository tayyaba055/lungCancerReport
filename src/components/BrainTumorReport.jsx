import { jsPDF } from "jspdf";
import PropTypes from "prop-types";
import { useAuth } from "../contexts/AuthContext";

const BrainTumorReport = () => {
  const downloadReport = () => {
    const doc = new jsPDF();
    doc.setFontSize(22);
    doc.text("Brain Tumor Detection Report", 14, 20);

    doc.setFontSize(14);
    doc.text("Patient Information", 14, 40);
    doc.text("Patient ID: 0023546", 14, 50);
    doc.text("Name: Jane Smith", 14, 60);
    doc.text("Age: 52", 14, 70);
    doc.text("Gender: Female", 14, 80);
    doc.text("Report Date: January 22, 2025", 14, 90);

    doc.addPage();
    doc.text("Tumor Characteristics", 14, 20);
    doc.text("Tumor Type: Glioblastoma Multiforme (GBM)", 14, 30);
    doc.text("Tumor Location: Right Temporal Lobe", 14, 40);
    doc.text("Tumor Size: 4.7 cm x 3.2 cm", 14, 50);
    doc.text("Tumor Grade: Grade IV (High-Grade)", 14, 60);
    doc.text("Contrast Enhancement: Severe", 14, 70);

    doc.save("Brain_Tumor_Detection_Report.pdf");
  };

  const { user } = useAuth(); // Use the hook correctly here
  console.log(user);

  return (
    <div className="flex flex-col items-center min-h-screen bg-blue-100">
      <div className="w-11/12 p-8 mt-10 mb-20 bg-white rounded-lg shadow-lg md:w-3/4">
        <div className="flex items-center justify-between mb-5">
          <h1 className="text-2xl font-bold text-center">
            Brain Tumor Detection Report
          </h1>
          <button
            className="px-4 py-2 text-white bg-red-500 rounded-md"
            onClick={downloadReport}
          >
            Download Report
          </button>
        </div>
        <ReportSection
          title="Patient Information"
          data={[
            ["Patient ID", "0023546"],
            ["Name", "Jane Smith"],
            ["Age", "52"],
            ["Gender", "Female"],
            ["Report Date", "January 22, 2025"],
          ]}
        />

        <ReportSection
          title="Tumor Characteristics"
          data={[
            ["Tumor Type", "Glioblastoma Multiforme (GBM)"],
            ["Tumor Location", "Right Temporal Lobe"],
            ["Tumor Size", "4.7 cm x 3.2 cm"],
            ["Tumor Grade", "Grade IV (High-Grade)"],
            ["Contrast Enhancement", "Severe"],
          ]}
        />

        <ReportSection
          title="MRI Image Parameters"
          data={[
            ["Imaging Modality", "Magnetic Resonance Imaging (MRI)"],
            [
              "Image Type",
              "T1-weighted (Pre-Contrast), T2-weighted (Post-Contrast)",
            ],
            ["Slice Thickness", "1.5 mm"],
            ["Resolution", "1 mm isotropic"],
            ["Scan Duration", "45 minutes"],
          ]}
        />

        <ReportSection
          title="Preprocessing & Segmentation"
          data={[
            [
              "Preprocessing Steps",
              "Skull Stripping, Bias Field Correction, Intensity Normalization",
            ],
            ["Segmentation Model", "U-Net (Convolutional Neural Network)"],
            ["Segmentation Accuracy", "98%"],
            [
              "Model Training Dataset",
              "Brain Tumor Segmentation Challenge 2018 (BraTS)",
            ],
            ["Segmentation Time", "10 seconds per slice"],
          ]}
        />

        <ReportSection
          title="Final Diagnosis"
          data={[
            ["Diagnosis", "Glioblastoma Multiforme, Grade IV (Aggressive)"],
            [
              "Recommendations",
              "Referral to oncologist for surgical resection and chemotherapy options.",
            ],
            [
              "Additional Tests",
              "Consider functional MRI for assessing motor function near the tumor location.",
            ],
          ]}
        />

        <p className="mt-6 text-center text-gray-500">
          Report generated by: NCI Brain Tumor Imaging Lab
        </p>
        <p className="text-center text-gray-500">
          &copy; National Cancer Institute, 2025. All rights reserved.
        </p>
      </div>
    </div>
  );
};

const ReportSection = ({ title, data = [] }) => {
  // Log data to ensure it's coming through correctly
  console.log("Data for section:", title, data);

  return (
    <div className="mb-6">
      <h2 className="mb-2 text-lg font-semibold text-gray-700">{title}</h2>
      {data.length > 0 ? (
        <table className="w-full border border-gray-300">
          <tbody>
            {data.map(([label, value], index) => (
              <tr key={index} className={index % 2 === 0 ? "bg-gray-100" : ""}>
                <th className="p-3 font-semibold text-left bg-gray-200 border border-gray-300">
                  {label}
                </th>
                <td className="p-3 border border-gray-300">{value}</td>
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <p className="text-gray-500">No data available</p>
      )}
    </div>
  );
};

ReportSection.propTypes = {
  title: PropTypes.string.isRequired,
  data: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string.isRequired))
    .isRequired,
};
export default BrainTumorReport;
